% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/io_tab.R
\name{writeEset}
\alias{writeEset}
\title{Export an ExpressionSet object as tab-delimited (or gct) files}
\usage{
writeEset(
  eset,
  exprs.file,
  fData.file,
  pData.file,
  exprs.file.format = c("gct", "tsv"),
  feat.name = NULL,
  feat.desc = NULL
)
}
\arguments{
\item{eset}{The \code{eSet} object to be exported}

\item{exprs.file}{Character, file name where \code{exprs} data is written to}

\item{fData.file}{Character, optional, file name where \code{fData} data is written to}

\item{pData.file}{Character, optional, file name where \code{pData} data is written to}

\item{exprs.file.format}{Character, write \code{exprs} data in either \code{gct} or \code{tsv} format}

\item{feat.name}{Character, feature names or a column in \code{fData} to get feature names. If \code{NULL}, feature names of the \code{eSet} object will be used. Note that if not \code{NULL}, row names of both \code{exprs} and \code{fData} will be overwritten by the provided \code{feat.name}.}

\item{feat.desc}{Character, feature descriptions or a column in \code{fData} to get feature descriptions. If \code{NULL}, the column in the \code{gct} file will be empty. Only used if \code{exprs.file.format} is \code{gct}.

\code{readEset} and \code{writeEset} provide a lightweighted mechanism to 
import/export essential information from/to plain text files. 
They can use up to three tab-delimited files to store information of
an \code{eSet} (oftenly used is its subclass, \code{ExpressionSet}) object: 
a file holding the expression matrix as returned by the \code{\link{exprs}} 
function (\code{exprs.file}), a file containing feature annotations as 
returned by the \code{\link{fData}} function (\code{fData.file}), 
and finally a file containing sample annotations, 
as returned by \code{pData} (\code{pData.file}).}
}
\value{
NULL, only side effect is used
}
\description{
Export an ExpressionSet object as tab-delimited (or gct) files
}
\note{
One limitation of \code{readEset} and \code{writeEset} functions is that 
they only support the export/import of exactly \strong{one} expression 
matrix from one \code{ExpressionSet} object. Although an 
\code{ExpressionSet} can hold more than one matrices other than the
one known as \code{exprs}, they are currently not handled by \code{writeEset} 
or \code{readEset}. If such an \code{ExprssionSet} object is first
written in plain files, and then read back as an \code{ExpressionSet}, 
matrices other than the one accessible by \code{exprs} will be discarded.
 
Similarly, other pieces of information saved in an \code{ExpressionSet}, 
e.g. experimental data, are lost as well after a cycle of exporting 
and subsequent importing. If keeping these information is important for you, 
other functions should be considered instead of \code{readEset} and 
\code{writeEset}, for instance to save an image in a binary file with 
the \code{\link{save}} function.

Yet another limitation is that factor information is lost. This hits 
especially the phenoData where factor information, such as sample groupping
and orders of levels, may be important.
}
\examples{
data(sample.ExpressionSet)
exprs.file <- tempfile()
fData.file <- tempfile()
pData.file <- tempfile()
writeEset(sample.ExpressionSet, exprs.file, fData.file, pData.file,
exprs.file.format="gct")
writeEset(sample.ExpressionSet, exprs.file, fData.file, pData.file,
exprs.file.format="tsv")
}
\seealso{
\code{\link{readEset}}
}
