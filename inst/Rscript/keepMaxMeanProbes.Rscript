#!/bin/bash /SOFT/bi/apps/R/bdeRscript

##------------------------------------------------------------##
## Collapse probesets
##------------------------------------------------------------##

suppressMessages(library(ribiosArg))
suppressMessages(library(ribiosUtils))

infile <- getArg("infile", onlyArg=NULL, missingArg=NULL)
getHelp <- existArg("h") | existArg("help")
if(is.null(infile) | getHelp) {
  qqmsg("Usage:",
        scriptName(),
        "-infile FILE [-outfile FILE]\n",
        "-infile: Input gct file, or tab-delimited file with samples as header, and the first column of gene names (GeneID or GeneSymbol)\n",
        "Optional:\n",
	"-chipfile: CHIP file to map probesets to GeneSymbols\n",
        "-outfile: Output file\n",
        sep="")
}

libordie(ribiosIO)
assertFile(infile)
chipfile <- getArg("chipfile", onlyArg=NULL, missingArg=NULL)
if(!is.null(chipfile))
  assertFile(chipfile)

outfile <- getArg("outfile", onlyArg=stdout(), missingArg=stdout())
tbl <- read_exprs_matrix(infile)
keys <- rownames(tbl)
if(!is.null(chipfile)) {
  chip <- read_chip(chipfile)
  keys <- matchColumn(keys, chip, "ProbeID")$GeneSymbol ## fd contains 'GeneSymbol'
} 

eset.uniq <- keepMaxStatRow(tbl,
                            keys=keys,
                            keepNArows=FALSE,
                            levels="rownames")

outext <- extname(outfile,ifnotfound="")
if(is.character(outfile)&& outext=="gct") {
  write_gct(eset.uniq, file=outfile)
} else {
  write.table(eset.uniq, file=outfile, sep="\t", quote=FALSE)
}

qqmsg(status=0L)
